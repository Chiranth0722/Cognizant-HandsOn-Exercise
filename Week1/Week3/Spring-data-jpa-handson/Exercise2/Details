JPA (Java Persistence API) is a specification that defines how Java objects can be mapped to relational database tables. It provides standard annotations and interfaces for object-relational mapping (ORM) but does not include any actual implementation. It's like a set of rules or a contract that various frameworks can follow to provide ORM functionality.

Example:
@Entity
public class Student {
    @Id
    private int id;
    private String name;
}


Hibernate is one of the most popular implementations of the JPA specification. While it supports all JPA features, it also offers many advanced features beyond the specification, such as caching, lazy loading, and HQL (Hibernate Query Language). Hibernate provides the actual working code that performs database operations based on JPA mappings.

Example:
entityManager.persist(student);

Spring Data JPA is a part of the Spring ecosystem that builds on top of JPA and Hibernate to further simplify database access. It allows developers to perform common database operations like saving, deleting, and fetching records without writing any implementation code. By simply extending repository interfaces like JpaRepository, Spring Data JPA automatically generates the required queries and methods at runtime. It uses JPA and an implementation like Hibernate under the hood but abstracts much of the complexity, allowing faster and cleaner development.

Example:
public interface StudentRepository extends JpaRepository<Student, Integer> {
    // No code needed for CRUD!
}
